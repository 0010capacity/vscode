# Query: todo@API
# Flags: WordMatch OpenEditors
# Including: */vscode.d.ts
# ContextLines: 1

28 results - 1 file

src/vs/vscode.d.ts:
  11374  		/** @deprecated	*/
  11375: 		// todo@API remove
  11376  		readonly viewType: string;

  11440  
  11441: 	// todo@API jsdoc
  11442  	export class NotebookCellMetadata {

  11446  		 */
  11447: 		// todo@API decouple from metadata? extract as dedicated field or inside an options object and leave metadata purely for extensions?
  11448  		readonly inputCollapsed?: boolean;

  11452  		 */
  11453: 		// todo@API decouple from metadata? extract as dedicated field or inside an options object and leave metadata purely for extensions?
  11454  		readonly outputCollapsed?: boolean;

  11496  		 */
  11497: 		// todo@API use duration instead of start/end? doesn't allow for only passing one
  11498  		readonly startTime?: number;

  11505  
  11506: 	// todo@API jsdoc
  11507: 	// todo@API remove this and use simple {}?
  11508  	export class NotebookDocumentMetadata {

  11644  
  11645: 		//todo@API remove in favour of NotebookCellOutput#metadata
  11646  		metadata?: { [key: string]: any };

  11662  	 */
  11663: 	//todo@API - add sugar function to add more outputs
  11664  	export class NotebookCellOutput {

  11706  		 */
  11707: 		//todo@API id-args is not used by jupyter but we it added with display_id in mind...
  11708  		constructor(items: NotebookCellOutputItem[], id: string, metadata?: { [key: string]: any });

  11757  		 */
  11758: 		// todo@API should ctors only have the args for required properties?
  11759  		constructor(kind: NotebookCellKind, value: string, languageId: string, outputs?: NotebookCellOutput[], metadata?: NotebookCellMetadata, executionSummary?: NotebookCellExecutionSummary);

  11841  		*/
  11842: 		// todo@API ...NotebookDocument... or just ...Notebook... just like...Cell... above
  11843  		transientDocumentMetadata?: { [K in keyof NotebookDocumentMetadata]?: boolean };

  11848  	 */
  11849: 	//todo@API inline?
  11850  	export interface NotebookExecuteHandler {

  11896  
  11897: 		// todo@api remove
  11898  		/** @deprecated */

  11943  
  11944: 		// todo@API remove
  11945  		/** @deprecated */

  11987  		 */
  11988: 		//todo@api rename to ...NotebookDocument...
  11989  		readonly onDidChangeNotebookAssociation: Event<{ notebook: NotebookDocument, selected: boolean }>;

  12005  
  12006: 	// todo@api jsdoc
  12007: 	// todo@api Inline unless we can come up with more (future) properties
  12008  	export interface NotebookCellExecuteStartContext {

  12015  
  12016: 	// todo@api jsdoc
  12017: 	// todo@api Inline unless we can come up with more (future) properties
  12018  	export interface NotebookCellExecuteEndContext {

  12060  
  12061: 		// todo@API inline context object?
  12062  		start(context?: NotebookCellExecuteStartContext): void;
  12063  
  12064: 		// todo@API inline context object?
  12065  		end(result?: NotebookCellExecuteEndContext): void;

  12147  		 */
  12148: 		//todo@API only have Command?
  12149  		command?: string | Command;

  12168  		 */
  12169: 		// todo@API jsdoc for args
  12170: 		// todo@API should ctors only have the args for required properties?
  12171  		constructor(text: string, alignment: NotebookCellStatusBarAlignment, command?: string | Command, tooltip?: string, priority?: number, accessibilityInformation?: AccessibilityInformation);

  12187  		 */
  12188: 		//todo@API jsdoc for return-type
  12189: 		//todo@API should this return an item instead of an array?
  12190  		provideCellStatusBarItems(cell: NotebookCell, token: CancellationToken): ProviderResult<NotebookCellStatusBarItem[]>;

  12201  	 */
  12202: 	// todo@api what should be in this namespace? should notebookDocuments and friends be in the workspace namespace?
  12203  	export namespace notebooks {
